{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","cardsArray","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","useState","setRobots","setSearchfield","count","setCount","useEffect","fetch","then","Response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAKC,EAAgB,EAAhBA,KAAOC,EAAS,EAATA,MAEvB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,gCACI,6BAAKC,IACL,4BAAIC,WCgBJI,EAtBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACRC,EAAWD,EAAOE,KAAI,SAACC,EAAMC,GAC/B,OACG,cAAC,EAAD,CAEAX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,OAHZS,MAQZ,OACG,8BAEDH,KCFQI,EAdE,SAAC,GAA+B,EAA9BC,YAA+B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACI,qBAAKX,UAAU,MAAf,SACK,uBACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAWH,OCCTI,G,MARF,SAACC,GACV,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAAnE,SACKJ,EAAMK,a,4BCgBJC,E,kDAjBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAU,GAHA,E,qDAMlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAE5B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,yDAEJG,KAAKX,MAAMK,a,GAfEQ,aCgDbC,MA1Cf,WAEI,MAA4BC,mBAAS,IAArC,mBAAO3B,EAAP,KAAe4B,EAAf,KACA,EAAsCD,mBAAS,IAA/C,mBAAOrB,EAAP,KAAoBuB,EAApB,KACA,EAAyBF,mBAAS,GAAlC,mBAAOG,EAAP,KAAaC,EAAb,KACAC,qBAAU,WACNC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAST,EAAUS,MACzBC,QAAQC,IAAIT,KACd,CAACA,IAEH,IAIMU,EAAiBxC,EAAOyC,QAAO,SAAAC,GACjC,OAAOA,EAAMhD,KAAKiD,cAAcC,SAAStC,EAAYqC,kBAGzD,OAAI3C,EAAO6C,OAKP,sBAAKjD,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,wBAAQkD,QAAS,kBAAIf,EAASD,EAAM,IAApC,wBACA,cAAC,EAAD,CAAWvB,aAhBE,SAACwC,GAClBlB,EAAekB,EAAMC,OAAOC,UAgBxB,cAAC,EAAD,UACI,cAAC,EAAD,UACK,cAAC,EAAD,CAAUjD,OAAQwC,WAVxB,0CCjBAU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.07f99040.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id , name , email})=>{\n   \n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n const CardList =({robots})=>{\n     const cardsArray=robots.map((user, i )=>{\n         return(\n            <Card \n            key={i} \n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email} \n            />\n         );\n     });\n     \n     return(\n        <div>\n       {\n       cardsArray\n       //here we can simply add the map function without storing it into a variable\n       }\n      </div>\n     );\n }\n\n export default CardList;","import React from 'react';\n\nconst SearchBox= ({searchfield , searchChange})=>{\n    return(\n        <div className='pa2'>\n             <input \n             className='pa3 ba b--green bg-lightest-blue'\n             type='search' \n             placeholder='search robots' \n             onChange= {searchChange}\n             />\n        </div>\n       \n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll=(props)=>{\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'600px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state= {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError:true});\n    }\n    render(){\n        if (this.state.hasError) {\n            return <h1>Ooops. That is not good</h1> \n        }\n        return this.props.children;\n    }\n\n}\nexport default ErrorBoundary; ","\nimport React,  {useState,useEffect} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nfunction App (){\n   \n    const [robots, setRobots] = useState([]);\n    const [searchfield, setSearchfield] = useState('');\n    const [count,setCount] = useState(0);\n    useEffect(()=>{\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(Response=> Response.json())\n        .then(users=> {setRobots(users)});\n        console.log(count)\n    },[count])\n\n    const onSearchChange=(event)=>{\n        setSearchfield(event.target.value);\n    }\n    \n    const filteredRobots = robots.filter(robot=>{\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    if(!robots.length){\n        return <h1>Loading</h1>\n    }\n    else{\n    return(\n        <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <button onClick={()=>setCount(count+1)}>Click here</button>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <ErrorBoundary>\n                     <CardList robots={filteredRobots}/>\n                </ErrorBoundary>\n            </Scroll>\n            \n        </div>\n        \n    );\n        }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}